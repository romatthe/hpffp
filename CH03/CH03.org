#+TITLE: Chapter 3: Strings
#+OPTIONS: toc:nil

* Notes
  
** GHCi commands:

=:type= or =:t= can be used to get a type of a value, expression, or function. For example:
#+BEGIN_SRC
Prelude> :t 35
35 :: Num p => p
Prelude> :t "Hello World!"
"Hello World!" :: [Char]
Prelude> :t words
words :: String -> [String]
#+END_SRC

** Strings vs Text

=String= is a very simple type. It is merely an alias for a linked list of =Char=, i.e. =[Char]=

Strings can easily be linked to each other. This is called *concatenation*. This is very simple.

#+BEGIN_SRC haskell
hello :: String
hello = "Hello" ++ " " ++ "world!"
#+END_SRC

Alternatively, we can also call =concat= and pass it a list of Strings to be concatenated.
This example below yields the same result as the one above:

#+BEGIN_SRC haskell
helloAgain :: String
hello = concat ["Hello", " ", "world!"]
#+END_SRC


** A note about =IO=

The =IO= type is a very special type implemented in Haskell for the specific purpose of describing I/O "effects", i.e. something that affects, or is affected by, the state of the outside world.
For example, when we want to print something to the screen using =putStrLn=, our function signature would look like this:

#+BEGIN_SRC haskell
main :: IO()
main = putStrLn "Hello World!"
#+END_SRC

When we use functions of type =... -> IO= in GHCi, the system takes care of wrapping everything in the necessary types for us.

You'll often see the special *do-syntax* used alongside the IO type. This special syntax allows us to sequence effectful actions our program, resulting in a style that may resemble imperative programming.
Here's an example:

#+BEGIN_SRC haskell
  main :: IO ()
  main = do
    putStrLn "Count to four for me:"
    putStr "one, two"
    putStr ", three, and"
    putStrLn " four!"
#+END_SRC

** Top-level declarations vs local definitions 

Simply put, when we define something in a Haskell file that is not nested within any other anything else, it is considered a *top-level* definition.
Here is an example of a top-level definition:

#+BEGIN_SRC haskell
  module TopOrLocal where

  topFunction :: Integer -> Integer           -- Defined at the top level 
  function x = x + 12 

  topValue :: String                          -- Defined at the top level
  topValue = "Hi guys!"
#+END_SRC

Both the function =topFunction= and value =topValue= we defined here are defined at the *top level* because there aren't nested in any other construct. 
If we expend our example a little bit though, we can have a look at what a it means to be defined locally.

#+BEGIN_SRC haskell
  module TopOrLocal where

  topFunction :: Integer -> Integer
  topFunction x = x + aNumber + anotherNumber
    where aNumber = 1                        -- Defined at the local level
          anotherNumber = 10                 -- Defined at the local level
#+END_SRC

* Exercises

** Exercise 1: Scope

*** 1. Is it in scope?

Yes, all values are defined at the top level, thus are accesible for everything in this REPL session.

*** 2. Is it in scope? II

No, =h= was not previously defined anywhere in the REPL session.

*** 3. Is everything we need in scope?

Nope:
when evaluating =area d = pi * (r * r)=, r would not be in scope.
When evaluating =r = d / 2=, d would not be in scope.

There is a simple solution to this one, we learned it in the previous chapter:
#+BEGIN_SRC haskell
  area d = pi * (r * r)
    where r = d / 2
#+END_SRC

*** 4. Is everything we need in scope? II

Yes, see above.
