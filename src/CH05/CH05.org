#+TITLE: Chapter 5: Types
#+OPTIONS: toc:nil \n:t

* Notes
** Why Types? 

Type systems in logic and mathematics have been designed to impose constraints that enforce correctness.
A well-designed type system helps eliminate some classes of errors as well as concerns such as what the effect of a conditional over a non-boolean value may be.
In Haskell, types as /static/. This means that typechecking happens at compile-time.

When checking types in the REPL, you may notice that GHCi often gives types the broadest possible applicabilty it can infer. As an example:

#+BEGIN_SRC haskell
Prelude> :type 13                -- Looks like an Int or Integer
13 :: Num a => a                 -- ... but it's actually a much more generic `Num`
Prelude> let x = 13 :: Integer
Prelude> :t x
Prelude> x :: Integer            -- We've forced GHCi to infer a concrete type
#+END_SRC

** The Function Type

The arrow, =(->)=, is actually the type constructor for functions in Haskell. It's baked into the language.
It's similar to =Bool=, which we saw in the previous chapter, except that the =(->)= type constructor takes arguments and has no data constructors.
#+BEGIN_SRC haskell
Prelude> :info (->)
data (->) (a :: TYPE q) (b :: TYPE r) 	-- Defined in ‘GHC.Prim’
infixr 0 `(->)`
#+END_SRC

This is similar to the Tuple data type we saw earlier:
#+BEGIN_SRC haskell
Prelude> :info (,)
data (,) a b = (,) a b 	-- Defined in ‘GHC.Tuple’
#+END_SRC

An interesting revelations follows from this. Consider the following: using the Tuple constructor =(,)= yields Tuple values.
Similarly, using the function constructor =(->)= yields values as well: functions! Thus: functions are values!

Let's investigate type signatures again:
#+BEGIN_SRC haskell
fst :: (a, b) -> a
--      [1]  [2] [3]
#+END_SRC

  1. The first paramater has type =(a, b)=.
  2. The function type, =(->)=, has two paramters
     - Left: (a, b)
     - Right: b
  3. THe result of the function has type =a=. This the same type =a= as the one in the first parameter.

** Typeclass Constrained Type Variables  

If we look at the type of most arithmetic functions, you'll see something like:
#+BEGIN_SRC haskell
Prelude> :type (+)
(+) :: Num a => a -> a -> a
Prelude> :type (/)
(/) :: Fractional a => a -> a -> a
#+END_SRC

As you can see, these functions are not constrained to a concrete type. Instead, we get the most general type possible.
~Num a~ and ~Fractional a~ mean that =a= is a *typeclass-constrained polymorphic type variable*. Typeclasses offer a standard set of functions.
When a typeclass is constraining a type variable, the variable could represent any concrete type that has an instance of that typeclass.

#+BEGIN_SRC haskell
Prelude> let fifteen = 15
Prelude> :t fifteen
fifteen :: Num a => a
Prelude> let fifteenInt = fifteen :: Int
Prelude> let fifteenDouble = fifteen :: Double
Prelude> :t fifteenInt
fifteenInt :: Int
Prelude> :t fifteenDouble
fifteenDouble :: Double
#+END_SRC

The above works because =Int= and =Double= both have an instance of the =Num= typeclass.
#+BEGIN_SRC haskell
Prelude> :info
instance Num Int -- Defined in ‘GHC.Num’
instance Num Double -- Defined in ‘GHC.Float’
#+END_SRC

Type variables can have more than one constraint:
#+BEGIN_SRC haskell
(Num a, Num b) => a -> b -> b
(Ord a, Num a) => a -> a -> Ordering
#+END_SRC

** Currying And Partial Application

Haskell does, in fact, not allow for multiple arguments to be passed into a function. In the Lambda Calculus, all functions take precisely 1 argument.
However, the language provides syntax for constructing *curried functions*. Currying refers to the nesting of multiple functions, 
each accepting one argument and returning one result, to allow the illusion of multiple-parameter functions.

We already know this. After all, we've already seen this in the datatype: ~data (->) a b~.
So /exactly/ one argument of type =a=, and /exactly/ one return value of type =b=.

This leads to the next subject: *partial application*. Take, for example, the following function:
#+BEGIN_SRC haskell
addStuff :: Integer -> Integer -> Integer
addStuff a b = a + b + 5
#+END_SRC

Let's inspect it in the REPL:
#+BEGIN_SRC haskell
Prelude> :t addStuff
addStuff :: Integer -> Integer -> Integer
Prelude> addStuff 5 5
15                                 -- Okay, works as intended
Prelude> let addTen = addStuff 5
Prelude> :t addTen
addTen :: Integer -> Integer       -- Passing in a single arguments returns a function of Integer -> Integer
Prelude> addTen 5
15                                 -- The partial function can then be applied to a second argument
#+END_SRC

If we look at the type signature of =addStuff=:
#+BEGIN_SRC haskell
addStuff :: Integer -> Integer -> Integer
#+END_SRC
you might notice that we can actually add explicit parentheses to this:
#+BEGIN_SRC haskell
addStuff :: Integer -> (Integer -> Integer)
#+END_SRC

So as you can see, passing a single argument of type =Integer= to this function return a function of type ~Integer -> Integer~.

There's also *sectioning*: a specific form of partial application of infix operators, which has a special syntax and allows us to choose whether the argument you're partially applying the operator to is the first or second argument.
#+BEGIN_SRC haskell
Prelude> let x = 5
Prelude> let y = (2^)
Prelude> let z = (^2)
Prelude> y x
32
Prelude> z x
25
#+END_SRC

Another example:
#+BEGIN_SRC haskell
Prelude> let celebrate = (++ " woot!")
Prelude> celebrate "naptime"
"naptime woot!"
Prelude> celebrate "dogs"
"dogs woot!"
#+END_SRC

You can also use the backtick syntax to use this with functions that are normally prefix:
#+BEGIN_SRC haskell
Prelude> elem 9 [1..10]
True
Prelude> 9 `elem` [1..10]
True
Prelude> let c (`elem` [1..10])
Prelude> c 9
True
Prelude> c 25
False
#+END_SRC

** Polymorphism 

*Polymorphic* means "made of many forms".

* Exercises
** Exercise 1: Type Matching
   1. =not= -> ~not :: Bool -> Bool~
   2. =length= -> ~length :: [a] -> Int~
   3. =concat= -> ~concat :: [[a]] -> [a]~
   4. =head= -> ~head :: [a] -> a~
   5. =(<)= -> ~(<) :: Ord a => a -> a -> Bool~

** Exercise 2: Type Arguments
   1. Resulting type for:
      Given: ~f :: a -> a -> a -> a~
      And: ~x :: Char~
      Then: ~f x :: Char -> Char -> Char~

   2. Resulting type for:
      Given: ~g :: a -> b -> c -> b~
      Then: ~g 0 'c' "woot" :: Char~

   3. Resulting type for:
      Given: ~h :: (Num a, Num b) => a -> b -> b~
      Then: ~h 1.0 2 :: Num b => b~

   4. Resulting type for:
      Given: ~h :: (Num a, Num b) => a -> b -> b~
      Then: ~h 1 (5.5 :: Double) :: Double~

   5. Resulting type for:
      Given: ~jackal :: (Ord a, Eq b) => a -> b -> a~
      Then: ~jackal "keyboard" "has the word jackal in it"~ :: [Char]

   6. Resulting type for:
      Given: ~jackal :: (Ord a, Eq b) => a -> b -> a~
      Then: ~jackal "keyboard" :: Eq b => b -> [Char]~

   7. Resulting type for:
      Given: ~kessel :: (Ord a, Num b) => a -> b -> a~
      Then: ~kessel 1 2 :: (Num a, Ord a) => a~

   8. Resulting type for:
      Given: ~kessel :: (Ord a, Num b) => a -> b -> a~
      Then: ~kessel 1 (2 :: Integer) :: (Num a, Ord a) => a~

   9. Resulting type for:
      Given: ~kessel :: (Ord a, Num b) => a -> b -> a~
      Then: ~kessel (1 :: Integer) 2 :: Integer~
